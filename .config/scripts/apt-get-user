#!/usr/bin/env bash
# origin: https://github.com/heroku/heroku-buildpack-apt/blob/master/bin/compile
set -e

CACHE_DIR=$HOME/.cache
APT_DATA_DIR=$HOME/.apt

APT_CACHE_DIR=$CACHE_DIR/apt/cache
APT_STATE_DIR=$CACHE_DIR/apt/state
APT_SOURCELIST_DIR=$CACHE_DIR/apt/sources
APT_SOURCEPARTS_DIR=$APT_SOURCELIST_DIR/sources.list.d
APT_SOURCES=$APT_SOURCELIST_DIR/sources.list

if [ ! -f $APT_SOURCES ]; then
  mkdir -p $APT_DATA_DIR
  mkdir -p $APT_CACHE_DIR/archives/partial
  mkdir -p $APT_STATE_DIR/lists/partial
  mkdir -p $APT_SOURCELIST_DIR

  cat /etc/apt/sources.list > $APT_SOURCES
  cp -R /etc/apt/sources.list.d $APT_SOURCEPARTS_DIR
fi

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR -o dir::etc::sourcelist=$APT_SOURCES -o dir::etc::sourceparts=$APT_SOURCEPARTS_DIR"

apt-get $APT_OPTIONS update

for PACKAGE in $*; do
  if [[ $PACKAGE == *.deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    echo Fetching $PACKAGE
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1
  else
    echo Fetching .debs for $PACKAGE
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE
  fi
done

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  echo Installing $(basename $DEB)
  dpkg -x $DEB $APT_DATA_DIR/
done

find $APT_DATA_DIR -type f -ipath '*/pkgconfig/*.pc' -print0 | xargs -0 --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='$APT_DATA_DIR'\1!g'

APT_PATH=$APT_DATA_DIR/bin:$APT_DATA_DIR/sbin:$APT_DATA_DIR/usr/bin:$APT_DATA_DIR/usr/sbin
APT_LD_LIBRARY_PATH=$APT_DATA_DIR/usr/lib/x86_64-linux-gnu:$APT_DATA_DIR/usr/lib/i386-linux-gnu:$APT_DATA_DIR/usr/lib

# Make user's shell use the local apt library paths
if [[ $PATH =~ $APT_DATA_DIR ]] && [[ -f $HOME/.bashrc ]]; then
  echo export PATH=$APT_PATH:$PATH >> $HOME/.bashrc
  echo export LD_LIBRARY_PATH=$APT_LD_LIBRARY_PATH >> $HOME/.bashrc
fi
